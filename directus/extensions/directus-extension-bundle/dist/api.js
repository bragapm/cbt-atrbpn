import e from"crypto";function s(){return e.randomBytes(16)}for(var t=[],n=0;n<256;++n)t[n]=(n+256).toString(16).substr(1);function a(e,n,a){var o=n&&a||0;"string"==typeof e&&(n="binary"===e?new Array(16):null,e=null);var i=(e=e||{}).random||(e.rng||s)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,n)for(var r=0;r<16;++r)n[o+r]=i[r];return n||function(e,s){var n=s||0,a=t;return[a[e[n++]],a[e[n++]],a[e[n++]],a[e[n++]],"-",a[e[n++]],a[e[n++]],"-",a[e[n++]],a[e[n++]],"-",a[e[n++]],a[e[n++]],"-",a[e[n++]],a[e[n++]],a[e[n++]],a[e[n++]],a[e[n++]],a[e[n++]]].join("")}(i)}const o=[],i=[{name:"hello",config:e=>{e.get("/",((e,s)=>s.send("Hello, World!")))}},{name:"coupon",config:(e,{services:s,exceptions:t,getSchema:n})=>{const{UsersService:o,ItemsService:i,AuthenticationService:r}=s;e.post("/register",(async(e,s)=>{try{const{coupon_code:t}=e.body,c=`user_${a()}@example.com`,u="CBTATRBPN2024",l=new o({schema:await n()}),d=await l.createOne({email:c,password:u,status:"active"}),m=new i("coupon",{schema:await n()}),_=new Date;await m.createOne({code:t,user_id:d,status:"Published",created_at:_,updated_at:_,last_login_at:_});const h=new r({accountability:null,schema:await n()}),w=await h.login(void 0,{email:c,password:u});s.json({status:"succes",data:{email:c,password:u,last_login_at:d.last_login_at,access_token:w.accessToken,refresh_token:w.refreshToken}})}catch(e){console.error(e),s.json({status:"error",error:new Error(e).message})}}))}},{name:"user-tests",config:(e,{services:s})=>{const{ItemsService:t}=s;e.get("/",(async(e,s)=>{try{const n=e.headers.authorization;if(!n||!n.startsWith("Bearer "))throw new UnauthorizedException("Missing or invalid authorization token.");const a=e.accountability.user;if(!a)throw new UnauthorizedException("User is not authorized.");const o=new t("user_session_test",{accountability:e.accountability,schema:e.schema}),i=new Date,r=(await o.readByQuery({filter:{user:a,deleted_at:{_null:!0},"session.end_time":{_gt:i},end_attempt_at:{_null:!0}},fields:["session.id","session.name","session.start_time","session.end_time"]})).map((e=>({"session-id":e.session.id,"session-name":e.session.name,"session-start-time":e.session.start_time,"session-end-time":e.session.end_time})));s.json({status:"success",data:r})}catch(e){console.log(e),s.json({status:"error",error:e?.message})}}))}}],r=[];export{i as endpoints,o as hooks,r as operations};
