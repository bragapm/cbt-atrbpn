import e from"crypto";function s(){return e.randomBytes(16)}for(var t=[],a=0;a<256;++a)t[a]=(a+256).toString(16).substr(1);function o(e,a,o){var r=a&&o||0;"string"==typeof e&&(a="binary"===e?new Array(16):null,e=null);var n=(e=e||{}).random||(e.rng||s)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,a)for(var i=0;i<16;++i)a[r+i]=n[i];return a||function(e,s){var a=s||0,o=t;return[o[e[a++]],o[e[a++]],o[e[a++]],o[e[a++]],"-",o[e[a++]],o[e[a++]],"-",o[e[a++]],o[e[a++]],"-",o[e[a++]],o[e[a++]],"-",o[e[a++]],o[e[a++]],o[e[a++]],o[e[a++]],o[e[a++]],o[e[a++]]].join("")}(n)}const r=[],n=[{name:"hello",config:e=>{e.get("/",((e,s)=>s.send("Hello, World!")))}},{name:"coupon",config:(e,{services:s,exceptions:t,getSchema:a})=>{const{UsersService:r,ItemsService:n,AuthenticationService:i}=s;e.post("/register",(async(e,s)=>{try{const{coupon_code:t}=e.body,c=`user_${o()}@example.com`,u="CBTATRBPN2024",d=new r({schema:await a()}),l=await d.createOne({email:c,password:u,status:"active"}),m=new n("coupon",{schema:await a()}),_=new Date;await m.createOne({code:t,user_id:l,status:"Published",created_at:_,updated_at:_,last_login_at:_});const w=new i({accountability:null,schema:await a()}),h=await w.login(void 0,{email:c,password:u});s.json({status:"succes",data:{email:c,password:u,last_login_at:l.last_login_at,access_token:h.accessToken,refresh_token:h.refreshToken}})}catch(e){console.error(e),s.json({status:"error",error:new Error(e).message})}})),e.post("/login",(async(e,s)=>{try{const{coupon_code:t}=e.body,o=new n("coupon",{schema:await a()}),c=await o.readByQuery({filter:{code:t},limit:1});if(0===c.length)return s.status(404).json({status:"error",message:"Coupon code not found."});const u=c[0],d=new r({schema:await a()}),l=await d.readOne(u.user_id);if(!l||"active"!==l.status)return s.status(403).json({status:"error",message:"User is not authorized or inactive."});const m=new i({accountability:null,schema:await a()}),_=await m.login(void 0,{email:l.email,password:"CBTATRBPN2024"}),w=new Date;await o.updateOne(u.id,{last_login_at:w,updated_at:w}),s.json({status:"success",data:{email:l.email,last_login_at:w,access_token:_.accessToken,refresh_token:_.refreshToken}})}catch(e){console.error(e),s.status(500).json({status:"error",message:new Error(e).message})}})),e.post("/logout",(async(e,s)=>{try{const{coupon_code:t,refresh_token:o}=e.body,r=new n("coupon",{schema:await a()}),c=await r.readByQuery({filter:{code:t},limit:1});if(0===c.length)return s.status(404).json({status:"error",message:"Coupon code not found."});const u=c[0],d=new i({accountability:null,schema:await a()});try{await d.logout(o)}catch(e){return s.status(401).json({status:"error",message:"Invalid token or logout failed."})}const l=new Date;await r.updateOne(u.id,{last_logout_at:l,updated_at:l}),s.json({status:"success",data:{coupon_code:t,last_logout_at:l}})}catch(e){console.error(e),s.status(500).json({status:"error",message:new Error(e).message})}}))}},{name:"user-session-tests",config:(e,{services:s})=>{const{ItemsService:t}=s;e.get("/",(async(e,s)=>{try{const a=e.headers.authorization;if(!a||!a.startsWith("Bearer "))throw new Error("Missing or invalid authorization token.");const o=e.accountability.user;if(!o)throw new Error("User is not authorized.");const r=new t("user_session_test",{schema:e.schema}),n=new Date,i=(await r.readByQuery({filter:{user:o,deleted_at:{_null:!0},end_attempt_at:{_null:!0},session:{end_time:{_gt:n}}},fields:["session.id","session.name","session.start_time","session.end_time"]})).map((e=>({"session-id":e.session.id,"session-name":e.session.name,"session-start-time":e.session.start_time,"session-end-time":e.session.end_time})));s.json({status:"success",data:i})}catch(e){console.log(e),s.json({status:"error",error:e?.message})}})),e.post("/start",(async(e,s)=>{try{const{id:a}=e.body,o=e.headers.authorization;if(!o||!o.startsWith("Bearer "))throw new Error("Missing or invalid authorization token.");const r=e.accountability.user;if(!r)throw new Error("User is not authorized.");const n=new t("user_session_test",{schema:e.schema}),i=await n.readByQuery({filter:{id:a,user:r,deleted_at:{_null:!0}},fields:["id","start_attempt_at","problems"]});if(0===i.length)return s.status(404).json({status:"error",message:"Session test not found or unauthorized access."});const c=i[0],u=new Date,d=new Date(c.session.start_time),l=new Date(c.session.end_time);if(u<d||u>l)return s.status(400).json({status:"error",message:"Session cannot be started outside of the allowed time range."});await n.updateOne(c.id,{start_attempt_at:u,updated_at:u}),s.json({status:"success",data:{session_test_id:c.id,start_attempt_at:u,problems:c.problems}})}catch(e){console.error(e),s.status(500).json({status:"error",message:new Error(e).message})}}))}}],i=[];export{n as endpoints,r as hooks,i as operations};
