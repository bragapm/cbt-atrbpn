import s from"crypto";function e(){return s.randomBytes(16)}for(var t=[],a=0;a<256;++a)t[a]=(a+256).toString(16).substr(1);function o(s,a,o){var r=a&&o||0;"string"==typeof s&&(a="binary"===s?new Array(16):null,s=null);var n=(s=s||{}).random||(s.rng||e)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,a)for(var i=0;i<16;++i)a[r+i]=n[i];return a||function(s,e){var a=e||0,o=t;return[o[s[a++]],o[s[a++]],o[s[a++]],o[s[a++]],"-",o[s[a++]],o[s[a++]],"-",o[s[a++]],o[s[a++]],"-",o[s[a++]],o[s[a++]],"-",o[s[a++]],o[s[a++]],o[s[a++]],o[s[a++]],o[s[a++]],o[s[a++]]].join("")}(n)}const r=async(s,e,t)=>{try{const e=s.headers.authorization;if(!e||!e.startsWith("Bearer "))throw new Error("Missing or invalid authorization token.");const a=s.accountability.user;if(!a)throw new Error("User is not authorized.");s.user=a,t()}catch(s){console.error("Authentication error:",s),e.status(500).json({status:"error",message:"Authentication failed"})}};const n=[],i=[{name:"hello",config:s=>{s.get("/",((s,e)=>e.send("Hello, World!")))}},{name:"coupon",config:(s,{services:e,exceptions:t,getSchema:a})=>{const{UsersService:r,ItemsService:n,AuthenticationService:i}=e;s.post("/register",(async(s,e)=>{try{const{coupon_code:t}=s.body,c=`user_${o()}@example.com`,u="CBTATRBPN2024",d=new r({schema:await a()}),_=await d.createOne({email:c,password:u,status:"active"}),m=new n("coupon",{schema:await a()}),l=new Date;await m.createOne({code:t,user_id:_,status:"Published",created_at:l,updated_at:l,last_login_at:l});const w=new i({accountability:null,schema:await a()}),h=await w.login(void 0,{email:c,password:u});e.json({status:"succes",data:{email:c,password:u,last_login_at:_.last_login_at,access_token:h.accessToken,refresh_token:h.refreshToken}})}catch(s){console.error(s),e.status(500).json({status:"error",error:new Error(s).message})}})),s.post("/login",(async(s,e)=>{try{const{coupon_code:t}=s.body,o=new n("coupon",{schema:await a()}),c=await o.readByQuery({filter:{code:t},limit:1});if(0===c.length)return e.status(404).json({status:"error",message:"Coupon code not found."});const u=c[0],d=new r({schema:await a()}),_=await d.readOne(u.user_id);if(!_||"active"!==_.status)return e.status(403).json({status:"error",message:"User is not authorized or inactive."});const m=new i({accountability:null,schema:await a()}),l=await m.login(void 0,{email:_.email,password:"CBTATRBPN2024"}),w=new Date;await o.updateOne(u.id,{last_login_at:w,updated_at:w}),e.json({status:"success",data:{email:_.email,last_login_at:w,access_token:l.accessToken,refresh_token:l.refreshToken}})}catch(s){console.error(s),e.status(500).json({status:"error",message:new Error(s).message})}})),s.post("/logout",(async(s,e)=>{try{const{coupon_code:t,refresh_token:o}=s.body,r=new n("coupon",{schema:await a()}),c=await r.readByQuery({filter:{code:t},limit:1});if(0===c.length)return e.status(404).json({status:"error",message:"Coupon code not found."});const u=c[0],d=new i({accountability:null,schema:await a()});try{await d.logout(o)}catch(s){return e.status(401).json({status:"error",message:"Invalid token or logout failed."})}const _=new Date;await r.updateOne(u.id,{last_logout_at:_,updated_at:_}),e.json({status:"success",data:{coupon_code:t,last_logout_at:_}})}catch(s){console.error(s),e.status(500).json({status:"error",message:new Error(s).message})}}))}},{name:"user-session-tests",config:(s,{services:e})=>{const{ItemsService:t}=e;s.get("/",r,(async(s,e)=>{try{const a=s.user,o=new t("user_session_test",{schema:s.schema}),r=new Date,n=(await o.readByQuery({filter:{user:a,deleted_at:{_null:!0},end_attempt_at:{_null:!0},session:{end_time:{_gt:r}}},fields:["session.id","session.name","session.start_time","session.end_time"]})).map((s=>({"session-id":s.session.id,"session-name":s.session.name,"session-start-time":s.session.start_time,"session-end-time":s.session.end_time})));e.json({status:"success",data:n})}catch(s){console.log(s),e.json({status:"error",error:s?.message})}})),s.post("/start",r,(async(s,e)=>{try{const{user_session_id:a}=s.body,o=s.user,r=new t("user_session_test",{schema:s.schema}),n=await r.readByQuery({filter:{id:id,user:o,deleted_at:{_null:!0}},fields:["id","start_attempt_at","session.start_time","end_time","session.start_attempt_at","problems"]});if(0===n.length)return e.status(404).json({status:"error",message:"Session test not found or unauthorized access."});const i=n[0],c=new Date,u=new Date(i.session.start_time),d=new Date(i.session.end_time);if(c<u||c>d)return e.status(400).json({status:"error",message:"Session cannot be started outside of the allowed time range."});if(null!==i.start_attempt_at)return void e.json({status:"success",data:{session_test_id:i.id,start_attempt_at:i.start_attempt_at,problems:JSON.parse(i.problems)}});await r.updateOne(i.id,{start_attempt_at:c,updated_at:c}),e.json({status:"success",data:{session_test_id:i.id,start_attempt_at:c,problems:JSON.parse(i.problems)}})}catch(s){console.error(s),e.status(500).json({status:"error",message:new Error(s).message})}})),s.post("/finish",r,(async(s,e)=>{const{user_session_id:a}=s.body;try{const o=new t("user_test",{schema:s.schema}),r=new t("user_session_test",{schema:s.schema}),n=await o.readByQuery({filter:{user_session_id:a},fields:["score_category","score"]});if(!n.length)return e.status(404).json({status:"error",message:"No answers found for this session"});let i=0,c=0,u=0,d=0;n.forEach((s=>{1===s.score_category?i+=1:-1===s.score_category?c+=1:u+=1,d+=s.score}));const _=new Date;await r.updateOne(a,{end_attempt_at:_,score:d,score_summary:JSON.stringify({correct_answers:i,wrong_answers:c,not_answers:u})});const m={status:"success",data:{totalScore:d}};e.json(m)}catch(s){e.status(500).json({status:"error",message:s.message})}}))}},{name:"user-tests",config:(s,{services:e})=>{const{ItemsService:t,AuthenticationService:a}=e;s.get("/:user_session_id",r,(async(s,e)=>{const a=s.params.user_session_id,o=s.query.problem_id;try{const r=new t("questions_bank",{schema:s.schema}),n=new t("question_options",{schema:s.schema}),i=new t("user_test",{schema:s.schema}),c=await r.readOne(o);if(!c)throw new Error("Problems not found");let u=await n.readByQuery({filter:{question_id:o},fields:["option_text","id","order"]});u=u.sort(((s,e)=>s.order-e.order)),c.random_options&&(u=u.sort((()=>Math.random()-.5)));const d=await i.readByQuery({filter:{user_session_id:a,deleted_at:{_null:!0}},fields:["problem","answer"]}),_={problem_id:c.id,question:c.question,answerChoices:u.map((s=>({text:s.option_text,id:s.id}))),submittedAnswers:d.map((s=>({problem:s.problem,answer:s.answer})))};e.json({status:"success",data:_})}catch(s){e.status(500).json({status:"error",message:s?.message})}})),s.post("/:user_session_id/submit-answer",r,(async(s,e)=>{const a=s.params.user_session_id,{problem_id:o,answer_id:r}=s.body,n=s.user;try{const i=new t("user_test",{schema:s.schema}),c=new t("question_options",{schema:s.schema}),u=new t("kategori_soal",{schema:s.schema}),d=new t("questions_bank",{schema:s.schema}),_=await i.readByQuery({filter:{user_session_id:a,problem:o}}),m=await d.readOne(o);if(!m)throw new Error("Problem not found");const l=await u.readOne(m.kategori_id);if(!l)throw new Error("Category not found");let w,h,p,g;"0"!==r&&(w=await c.readOne(r),h=!!w&&w.is_correct),"0"===r?(p=0,g=l.tidak_menjawab):h?(p=1,g=l.bobot_benar):(p=-1,g=l.bobot_salah);const y=new Date;let f;if(!_.length)return f=await i.createOne({user:n,user_session_id:a,problem:o,answer:r,score_category:p,score:g,created_at:y,updated_at:y}),void e.json({status:"success",data:f});const b=_[0].id;f=await i.updateOne(b,{answer:"0"===r?null:r,score_category:p,score:g,updated_at:y,deleted_at:"0"===r?y:null}),e.json({status:"success",data:f})}catch(s){e.status(500).json({status:"error",message:s.message})}}))}}],c=[];export{i as endpoints,n as hooks,c as operations};
